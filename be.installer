#!/usr/bin/env bash

#Generic installation script for BE::Shell themes and configs by Hombremaledicto.
#This script should not be executed as root:

if [ "$(id -u)" == "0" ]; then
  printf  '\n\e[0;31m%s\e[0m\n'  "This script must be executed as normal user!!!"
  exit 1
fi

#Checking which version of KDE DE we're running:

if [[ "$KDE_SESSION_VERSION" == "4" ]]; then
    pShell="plasma-desktop"
else
    pShell="plasmashell"
fi

#Setting distro indipendent paths

declare -r scriptDir="$( cd $( dirname "${BASH_SOURCE[0]}" ) && pwd )"
declare -r kdeDir="$(kde4-config --localprefix)share"
declare -r themesDir="$kdeDir/apps/be.shell/Themes"
declare -r configFile="$kdeDir/config/be.shell"
declare -i controlFlow="0"

#Best solution found for a lazy --noconfirm. Sowwy :(

if [[ "$@" =~ "--noconfirm" ]]; then
    controlFlow="$((controlFlow+1))"
fi

#Test functions

declare -f usage
declare -f choice
declare -f backup
declare -f confirm
declare -f checkUpdates
declare -f setList
declare -f getList
declare -f kdeColors
declare -f extra
declare -f scriptDir
declare -f installer
declare -f isRunning
declare -f main


usage(){

printf "\n\e[34m%s\n\e[0m" "A script to manage BE::Shell themes and configs"
printf "\n%s\n" "Usage: $0 [ -arg value] [ --argument value ] ..."
printf "\n%s\n" "Options:"
printf "\t%s\n" " -b, --backup"
printf "\t\t\t%s\n" "   Backup current config and theme directory using the same structure of the repository"
# printf "\t%s\n" " -c, --check-updates"
# printf "\t\t\t%s\n" "   Check if the local repository is up to date"
printf "\t%s\n" " -h, --help"
printf "\t\t\t%s\n" "   Show this usage screen."
printf "\t%s\n" " -l, --list"
printf "\t\t\t%s\n" "   List the presets available and those already installed"
printf "\t%s\n"  " -p, --preset"
printf "\t\t\t%s\n" "   Install a preset. Can take the preset name as argument, otherwise uses interactive mode"
printf "\t%s\n" " -r, --reload"
printf "\t\t\t%s\n" "   Quit from plasma if active or (re)start be.shell"
printf "\n%s\n" "Special parameters:"
printf "\n\t %s\n" "--noconfirm       Skip user prompt"
printf "\n\e[31m%s\e[0m\n\n" "Report issues at https://github.com/Hombremaledicto/be.shell/issues"
    
}

#just a stub, need to rewrite this from scratch prolly:
# checkUpdates() {
# 
# if [[ ! -d "$scriptDir/.git"  && "$PWD" != "$scriptDir" ]]; then
#      return
# fi
# 
# LOCAL=$(git rev-parse @)
# REMOTE=$(git rev-parse @{u})
# BASE=$(git merge-base @ @{u})
# 
# if [ $LOCAL = $REMOTE ]; then
#     printf "%s\n" "Your local repository is up to date"
# elif [ $LOCAL = $BASE ]; then
#     confirm "there are updates available. Do you want to update your local repository?" && git pull
# else
#     return
# fi
# 
# }

setList(){

#Checking if our array already exists

if [[ -n "${array+x}" ]]; then
    unset array
fi

case $1 in
    local)
      myDir="$kdeDir/apps/be.shell/Config"
      ;;
    remote)
      myDir="$scriptDir/Config"
      ;;
esac

#Populate the array with all the presets found

for i in $myDir/*; do
        array[${#array[*]}]="$( basename "${i%.*}" )"
done

lenght="$((${#array[@]} -1))"
  
}

getList() {

setList "$1"

for i in "${!array[@]}"; do
   printf "\e[033m%i\e[0m)  %s\n" "$i" "${array[$i]}"
done

}

choice(){

#Chosen preset as argument, case sensitive:

if [[   -n "$1" && -f  "$scriptDir"/Config/"$1".conf  ]]; then
  clear; 
  printf "%s\n" "Chosen preset: $1"
  opt="$1"
  chosenConf="$scriptDir/Config/$1.conf" 
  chosenTheme="$scriptDir/Themes/$1"
  return
elif [[  -n "$1"  && ! -f  "$scriptDir"/Config/"$1".conf ]]; then
  printf "\e[1;31m%s\e[0m\n"  "$0: Preset '$1' does not exist" 
  exit 1
fi

#Interactive mode, listing all presets available:

while true; do
  clear
  printf "\n\e[32m%s\n\e[0m\n" "Available themes:"
  getList remote
  printf "\n%s" "Enter a number from 0 to $lenght or q to exit: "
  read -r selection

#Thanks to https://github.com/izabera for the following section

  if [[ $selection =~ ^[0-9]+$  &&  10#$selection -le $lenght  ]]; then
      opt=${array[10#$selection]}
      break
  elif [[ "$selection" == "q" ]]; then
      clear
      exit 0
  else
      clear
  fi
done
 
chosenConf="$scriptDir/Config/$opt.conf"
chosenTheme="$scriptDir/Themes/$opt"
 
}

backup(){

#Compressing the old setup, not as elegant as i wanted but works. 
#Feel free to improve it ;)

if [[ ! -d "$HOME/.local/share/be.shell/backup" ]]; then
   mkdir -p "$HOME/.local/share/be.shell/backup"
fi

local dateHour="$( date "+%Y%m%d%H%M%S" )"
local oldTheme="$( kreadconfig --file be.shell --group BE::Shell --key Theme )"
local archive="$HOME/.local/share/be.shell/backup/$oldTheme.$dateHour.tar"
local oldWall="$( kreadconfig --file be.shell --group BE::Desk --key Wallpaper )"

#The following is ugly at least. Too lazy to think on something better:

mkdir -p /tmp/"$0"/{Config,Themes}
cp "$kdeDir"/config/be.shell /tmp/"$0"/Config/"$oldTheme.conf"
cp -r "$kdeDir"/apps/be.shell/Themes/"$oldTheme" /tmp/"$0"/Themes/
find /tmp/"$0"/Themes/"$oldTheme" -type f -iname "wall*" -exec rm -f {} \;
cp "$oldWall" /tmp/"$0"/Themes/"$oldTheme"/wall"${oldWall: -4}" 

tar -cf "$archive" "$0" -C "$kdeDir"/apps/be.shell/ "MainMenu.xml" -C "$HOME/.local/share/be.shell" "Menu" "Scripts" -C  /tmp/"$0" "Config" "Themes" &> /dev/null 
rm -rf /tmp/"$0"

echo -e "\nFiles stored in\n$archive\n"

}

confirm (){

#See? This sucks :P

if [[ "$controlFlow" -gt 0 ]]; then
    return
fi

read -n 1 -r -p "${1} " response
case $response in
    [yY][eE][sS]|[yY]) 
       true
       ;;
    *)
       false
       ;;
esac
    
}

kdeColors(){ 

#Setting global colorscheme (KDE4 only)
#unfortunately bash can't handle this, kde4 pyhton bindings required.
#TODO: find a working solution for plasma5

python - <<END
try:
  from PyKDE4.kdeui import KGlobalSettings
  from PyKDE4.kdecore import KConfig, KConfigGroup
except ImportError:
  raise ImportError('In order to install KDE colorschemes automatically you need PyKDE4 installed')

scheme = KConfig('$endSchema')
kdeglobals = KConfig('kdeglobals')
for groupName in scheme.groupList():
            group = scheme.group(groupName)
            global_group = kdeglobals.group(groupName)
            for (k, v) in group.entryMap().items():
                global_group.writeEntry(k, v)
               
kdeglobals.sync()
kGlobalSettings = KGlobalSettings.self()
kGlobalSettings.emitChange(KGlobalSettings.PaletteChanged)
END

}

extra(){

#Installing goodies if provided

if [[ ! -d "$chosenTheme/extra" ]]; then
   return
fi

local myColors="$(find "$chosenTheme/extra" -name "*.colorscheme" )"
local cScheme="${myColors##*/}"
local konsoleVersion="$(konsole --version | awk 'NR == 2 {print $2}')"

if [[ -n "$myColors" ]]; then
  printf "\n%s" "Setting konsole colorscheme"
  if [[ "$konsoleVersion" == "Frameworks:" ]]; then
      cp "$myColors" "$HOME/.local/share/konsole"
      defProfile="$(kreadconfig5 --file konsolerc --group Desktop\ Entry --key DefaultProfile)"
      kwriteconfig5 --file "$HOME/.local/share/konsole/$defProfile" --group Appearance --key ColorScheme "${cScheme%.*}"
  elif [[ "$konsoleVersion" != "Frameworks:" ]]; then
      cp "$myColors" "$kdeDir/apps/konsole"
      defProfile="$(kreadconfig --file konsolerc --group Desktop\ Entry --key DefaultProfile)"
      kwriteconfig --file "$kdeDir/apps/konsole/$defProfile" --group Appearance --key ColorScheme "${cScheme%.*}"
  fi
  konsoleprofile colors="${cScheme%.*}"
fi

local kdeSchema="$(find "$chosenTheme/extra" -name "*.colors" )"
local schemaDesc="$(kreadconfig --file "$kdeSchema" --group General --key ColorScheme)"
local colorsDir="$kdeDir/apps/color-schemes"
local schemaName="${kdeSchema##*/}"
endSchema="$colorsDir/$schemaName"

if [[ -n "$kdeSchema" ]]; then
   echo -e "\nSetting KDE colorscheme"
   cp "$kdeSchema" "$colorsDir"
   kdeColors || printf "%s\n" "$schemaDesc is available in kcmshell4 colors"
fi

}

scriptDir(){

     confirm "Do you want to install the provided scripts? y/N ?" &&  install -CDm755 Scripts/* -t $HOME/.local/share/be.shell/Scripts
     confirm "Do you want to install the provided menus? y/N?" && install -CDm755 Menu/* -t $HOME/.local/share/be.shell/Menu

}

installer(){

#Might be this is a fresh installation

if [[ ! -d "$themesDir" ]]; then
     mkdir -p "$themesDir"
fi

if [[ ! -f "$configFile" ]]; then
     cp "$chosenConf" "$configFile"
elif [[  -f "$configFile" ]]; then
     echo " "
     confirm "Do you want to backup the existing theme and config? y/N:" && backup
     echo -e "\n\e[33mCopying the new config\e[0m\n"
     cp "$chosenConf" "$configFile"
fi

if [[ ! -d "$themesDir/$opt" ]]; then
     cp -r "$chosenTheme" "$themesDir" 
else
     echo " "
     if [[ "$chosenTheme" == "$themesDir/$opt" ]]; then
       echo "'$chosenTheme' and '$themesDir/$opt' are the same folder"
     else
       confirm "The folder $opt already exists in $themesDir. Continue anyway? y/N:" && rm -rf "$themesDir/$opt" &&  cp -r "$chosenTheme" "$themesDir"
    fi
fi

}

isRunning(){

if [[  -z $(pidof "$pShell") ]]; then
    if [[ ! -z $(pidof "be.shell") ]]; then
      echo " "
      confirm "I will now reload be.shell. Continue? [y/N]:" && be.shell --restart > /dev/null 2>&1
    else
      echo " "
      confirm "Starting be.shell. Continue? [y/N]:" && be.shell > /dev/null 2>&1
    fi
else
     echo " "
     confirm "I will now stop Plasma and start be.shell. Continue? [y/N]:" && kquitapp "$pShell"; sleep 2; be.shell > /dev/null 2>&1
fi

}

main(){

for myArgs in "$@"; do

  case $myArgs in
      -h | --help) 
          usage
          ;;
      -b | --backup) 
          backup
          shift
          ;;
      -c | --check-updates)
          checkUpdates
          shift
          ;;
      -l | --list)
          printf "\n\e[32m%s\e[0m\n\n%s\n\n" "Available themes:" "$(getList remote)"
          printf "\n\e[32m%s\e[0m\n\n%s\n\n" "Installed themes:" "$(getList local)"
          ;;
      --noconfirm)
#           do nothing
         shift
         ;;
      -p | --preset)
          choice "$2"; installer; 
          scriptDir; isRunning; 
          extra 
          printf "\n%s\n" "Setting Wallpaper"
          sleep 2; find "$chosenTheme" -iname "wall*" -exec be.shell --setWallpaper {} \; &> /dev/null 2>&1
          exit 0
          ;;
      -r | --reload)
          isRunning
          shift
          ;;
      -s | --scripts)
          scriptDir
          shift
          ;;
       *) 
          usage
          printf  "\n\e[31m%s\e[0m\n" "Unknown option '$1'"
          exit 1
          ;;
  esac
done

}

main "$@"
